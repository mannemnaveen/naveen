1.what is function?
a.A function is a collection of statements named into one. You can use it when you want to execute all those statements at a time. You can call it wherever you want in a program. A function may return a value.

2.module?
a.A Python module is a collection of related classes and functions. We have modules for mathematical calculations, string manipulations, web programming, and many more.

3.packages?
a.A package is a collection of related modules. You can either import a package or create your own.

4.features of python?
a.a. Easy

Python is very easy to learn and understand, using this python tutorial any beginner can understand basics of python.

b. Interpreted

It is interpreted(executed) line by line. This makes it easy to test and debug.

c. Object-Oriented

It supports classes and objects.

d. Free and Open Source

The language and its source code are available to the public for free, no need to buy a costly license.

e. Portable

You can run Python on Windows, Mac, Linux or any other platform.

f. GUI Programming

You can use it to develop a Graphical User Interface.

g. Large Library

Python provides you with a large standard library. You can use it to implement a variety of functions.

5.frameworks in python?
a.a. Django
This is a free and open-source framework that was written in Python and is the most common framework for Python. It allows you to create database-driven websites. It follows the DRY Principle (Don’t Repeat Yourself). Popular websites like Instagram, Mozilla, and Disqus make use of it.

b. Flask
Like Django, Flask is a web framework written in Python. It is a micro framework because it does not need certain libraries and tools. It also does not have form validation or a database abstraction layer. However, you can make use of extensions to add extra features.

c. Pyramid
Pyramid is another web framework. It is neither a mega-framework that would make decisions for you nor a micro-framework that wouldn’t force decisions. It gives you optimal liberty on your project.

d. Tornado
Another open-source web framework, it was written in Python. It is noted for its excellent performance and scalability.

e. Bottle
Like Flask, it is a micro-framework for Python. It is used for web development. Bottle is known for its speed, simplicity, and light-weight. A single file can run both Python 2.5+ and 3.x

f. web2py
Written in Python, web2py is another open source web framework. It emphasizes on rapid development, and follows an MVC architecture. MVC stands for Model View Controller.

g. NumPy
NumPy is an open-source framework for Python. It is used for scientific computing. It supports large multidimensional arrays and matrices, and functions to operate on them.

h. SciPy
SciPy is a Python library that you can use for scientific computing. It has modules for linear algebra, interpolation, fast Fourier transform, image processing, and many more. It uses a multidimensional array from the NumPy module.

i. Pylons
This is a deprecated framework, which means it is no longer recommended. It is a web framework, and is open source as well. It makes extensive use of third-party tools.

6.why should i learn python?
a. Why should I learn Python?
Python is easy to pick-up, even if you come from a non-programming background. You can look at the code and tell what’s going on. With it, you can:

Build a website
Develop a game
Perform Computer Vision (Facilities like face-detection and color-detection)
Do Machine Learning (Giving a computer the ability to learn)
Enable Robotics
Perform Web Scraping (Harvesting data from websites)
Perform Data Analysis
Automate a web browser
Perform Scripting
Perform Scientific Computing
Build Artificial Intelligence

7.Python File Extensions ?
py -The normal extension for a Python source file
pyc- The compiled bytecode
pyd- A Windows DLL file
pyo- A file created with optimizations
pyw- Python script for Windows
pyz- Python script archive

8.How is Python different from Java or C++?
Python uses whitespace indentation to delimit code, so you don’t need to use curly braces for that. Also, semicolons are optional. Both following syntax are correct:

a = 7

print(a)

a = 7;

print(a)

While Java and C++ are statically-typed, Python is dynamically-typed. You also don’t need to declare the type of a variable; you assign it:

life=42

Java is faster by a few seconds, but the difference does not invalidate Python’s advantages over it. Since you can interpret Python, code is easier to test and debug. Next topic in this Python Tutorial is Python Constructs.

8.Python Constructs
a. List
You can think of a list as a collection of values. Declare in the CSV (Comma-Separated Values) format. and delimit by square brackets:

life = [‘love’, ‘wisdom’, ‘anxiety’];

arity = [1,2,3];

Notice that we do not declare the type for the list either. A list may also contain elements of different types, and the indexing begins at 0:

person = [‘firstname’, 21];

print(person[1])

This prints 21 to the screen.

You can also slice lists; slicing is a way of retrieving values from it. We will learn more about it in further lessons.

b. Tuple
A tuple is like a list, but it is immutable (you cannot change its values).

pizza = (‘base’, ‘sauce’, ‘cheese’, ‘mushroom’);

pizza[3] = ‘jalapeno’

This raises a TypeError.

c. Dictionary
A dictionary is a collection of key-value pairs. Declare it using curly braces, and commas to separate key-value pairs. Also, separate values from keys using a colon (:).

student = {‘Name’: ‘Abc’, ‘Age’: 21}

print(student[‘Age’])

This prints 21 to the screen.

d. Comments and Docstrings-
Declare comments using an octothorpe (#). However, Python does not support multiline comments. Also, docstrings are documentation strings that help explain code.

#This is a comment

“””

This is a docstring

“””

A lot of other constructs are also available. These include control structures, functions, exceptions, etc. which will be discussed in further tutorials

9.Syntax of List Comprehension in Python?
>>> [i*2 for i in {3,1,2}]

[2, 4, 6]

10.Nested List Comprehension Python?
>>> for i in range(7,9):
for j in range(1,11):
print(f"{i}*{j}={i*j}")

[[i*j for j in range(1,11)] for i in range(7,9)]

date and time:-
-------------
import time
from time import time
time()

import time
time.time()

time.localtime()

time.asctime()

time.asctime(time.localtime())

calendar:
------
print(calendar.month(2018,1))

print(calendar.calendar(2018))

print(calendar.monthrange(2017,12))

epoch in float point:

calendar.timegm(time.localtime())

lambda expressions:
-------------------
>>> def func1(a=2,b=3):
print(a,' ',b)
>>> func1()

a. filter():-
----------
The filter() function takes two parameters- a function, and a list to operate on. Finally, we apply the list() function on this to return a list.

>>> list(filter(lambda x:x%3==0,numbers))
[0, 3, 6, 9]

b. map():-
--------
The map() function, unlike the filter() function, returns values of the expression for each element in the list. Let’s take the same list ‘numbers’.

>>> list(map(lambda x:x%3==0,numbers))

c.reduce:-
---------
Lastly, the reduce() function takes two parameters- a function, and a list. It performs computation on sequential pairs in the list and returns one output. But to use it, you must import it from the functools module.

>>> from functools import reduce
>>> reduce(lambda x,y:y-x,numbers)
>>> reduce(lambda x,y:y+x,numbers)

python decorator:
---------------
Decorator function in Python is a function that adds functionality to another, but does not modify it. In other words, Python Decorator wraps another function. This is like a gift wrapper in real life. Also, this is called metaprogramming, because a part of the program tries to modify another at compile time.

iterator:-
------------
An iterator in Python programming language is an object which you can iterate upon. That is, it returns one object at a time. Python3 Iterators are implicitly implemented in constructs like for-loops, comprehensions, and python generators. The iter() and next() functions collectively form the iterator protocol.
>>> evens = [2,4,6,8,10]
>>> evenIterator = iter(evens)
>>> evenIterator
<listiterator object at 0x7fec8cca9110>
>>> evenIterator.next()
2
>>> evenIterator.next()
4
>>>
>>>
>>> evenIterator.next()
6
>>> evenIterator.next()
8
>>>next(evenIterator)

eg:->>> nums = [1,2,3]
>>> numIter=iter(nums)
>>> next(numIter)
1
>>> dir(numIter)

eg:
iter_obj=iter('python')
while True:
...     try:
...         i = next(iter_obj)
...         print(i)
...     except StopIteration:
...         break

11.Benefits of Python Iterator
--------------------------------
An iterator in python saves resources. To get all the elements, only one element is stored in the memory at a time. Unlike this, a list would have to store all the values at once.

infinite iterator:-
----------------
>>> class Even:
                def __iter__(self):
                                self.num=2
                                return self
                def __next__(self):
                                num=self.num
                                self.num+=2
                                return num             
>>> e=Even()
>>> i=iter(e)
>>> next(i)

class:-
-----
Introduction to Python Class
A class is a blueprint for objects- one class for any number of objects of that type. You can also call it an abstract data type. Interestingly, it contains no values itself, but it is like a prototype for objects. 

decorator:-
----------
ecoration is a way to specify management code for functions and classes." ... "A decorator itself is a callable that returns a callable." - Mark Lutz







